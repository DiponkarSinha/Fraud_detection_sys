name: Fraud Detection Pipeline

on:
  push:
    paths:
      - 'data/**/*.csv'
  pull_request:
    paths:
      - 'data/**/*.csv'
  workflow_dispatch:

jobs:
  fraud-detection:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run fraud detection
      run: |
        python src/fraud_detector.py
        
    - name: Upload fraud reports
      uses: actions/upload-artifact@v3
      with:
        name: fraud-detection-reports
        path: |
          outputs/fraud_report.json
          outputs/fraud_report_detailed.csv
          
    - name: Notify on fraud detection
      if: success()
      run: |
        echo "Fraud detection completed successfully!"
        if [ -f "outputs/fraud_report.json" ]; then
          FRAUD_COUNT=$(python -c "import json; data=json.load(open('outputs/fraud_report.json')); print(data['fraud_detected'])")
          if [ "$FRAUD_COUNT" -gt "0" ]; then
            echo "üö® ALERT: $FRAUD_COUNT fraudulent transactions detected!"
            echo "fraud_detected=$FRAUD_COUNT" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Update Kaggle Dataset
      if: success()
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        echo "üìä Updating Kaggle dataset with new fraud data..."
        pip install kaggle
        mkdir -p ~/.kaggle
        echo '{"username":"'$KAGGLE_USERNAME'","key":"'$KAGGLE_KEY'"}' > ~/.kaggle/kaggle.json
        chmod 600 ~/.kaggle/kaggle.json
        
        # Create dataset version with new fraud data
        kaggle datasets version -p data/raw -m "Auto-update: New fraud transactions detected $(date)"
        echo "‚úÖ Kaggle dataset updated successfully!"
        
    - name: Trigger AWS Lambda for Email Notification
      if: success()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        echo "‚òÅÔ∏è Triggering AWS Lambda for fraud email notification..."
        pip install boto3
        
        # Get fraud count from report
        FRAUD_COUNT=$(python -c "import json; data=json.load(open('outputs/fraud_report.json')); print(data['fraud_detected'])")
        
        # Invoke AWS Lambda function
        python3 -c "
import boto3
import json

lambda_client = boto3.client('lambda', region_name='$AWS_REGION')

payload = {
    'fraud_count': $FRAUD_COUNT,
    'timestamp': '$(date -u +"%Y-%m-%dT%H:%M:%SZ")',
    'repository': '${{ github.repository }}',
    'commit_sha': '${{ github.sha }}',
    'email_recipient': '${{ secrets.FRAUD_ALERT_EMAIL }}'
}

response = lambda_client.invoke(
    FunctionName='fraud-detection-email-alert',
    InvocationType='Event',
    Payload=json.dumps(payload)
)

print(f'‚úÖ AWS Lambda invoked: {response[\"StatusCode\"]}')
"
        echo "üìß Email notification triggered via AWS Lambda!"