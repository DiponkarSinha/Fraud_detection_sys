name: Fraud Detection Pipeline

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**/*.md"
      - ".gitignore"
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  fraud-detection:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies (pip, project, Kaggle, boto3)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install kaggle boto3

      - name: Configure Kaggle (from secrets)
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          mkdir -p ~/.kaggle
          printf '{"username":"%s","key":"%s"}' "$KAGGLE_USERNAME" "$KAGGLE_KEY" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Configure AWS credentials (Access Keys)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          echo "AWS credentials configured via environment variables"

      - name: Ensure output dirs
        run: mkdir -p outputs data/raw

      - name: Run fraud detection
        run: |
          python src/fraud_detector.py

      - name: Upload fraud reports (always upload if created)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fraud-detection-reports
          path: |
            outputs/fraud_report.json
            outputs/fraud_report_detailed.csv
          if-no-files-found: warn

      - name: Update Kaggle Dataset
        if: success() && hashFiles('outputs/fraud_report.json') != ''
        run: |
          echo "üìä Updating Kaggle dataset with new fraud data..."
          # Try to create a new version, if dataset doesn't exist, create it
          if ! kaggle datasets version -p data/raw -m "Auto-update: $(date -u +'%Y-%m-%dT%H:%M:%SZ')" 2>/dev/null; then
            echo "Dataset doesn't exist, creating new dataset..."
            kaggle datasets create -p data/raw
          fi
          echo "‚úÖ Kaggle dataset updated successfully!"

      - name: Send Fraud Alert Email via SES
        if: success() && hashFiles('outputs/fraud_report.json') != ''
        env:
          FRAUD_ALERT_EMAIL: ${{ secrets.FRAUD_ALERT_EMAIL }}
          SES_SENDER_EMAIL: ${{ secrets.SES_SENDER_EMAIL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          # Get fraud count from JSON and export so Python can read it from env
          FRAUD_COUNT=$(python - <<'PY'
          import json, sys
          try:
              with open("outputs/fraud_report.json") as f:
                  d = json.load(f)
              print(int(d.get("fraud_detected", 0)))
          except Exception:
              print(0)
          PY
          )
          export FRAUD_COUNT

          # Send email via SES
          python - <<'PY'
          import boto3, json, os, subprocess
          from datetime import datetime

          # Initialize SES client with explicit region (SES is available in limited regions)
          ses_region = 'us-east-1'  # SES is definitely available in us-east-1
          ses_client = boto3.client('ses', region_name=ses_region)
          
          fraud_count = int(os.environ.get("FRAUD_COUNT", "0"))
          timestamp = subprocess.check_output(['date','-u','+%Y-%m-%dT%H:%M:%SZ']).decode().strip()
          repository = os.environ.get("GITHUB_REPOSITORY", "")
          commit_sha = os.environ.get("GITHUB_SHA", "")
          recipient_email = os.environ.get("FRAUD_ALERT_EMAIL", "")
          sender_email = os.environ.get("SES_SENDER_EMAIL", "")

          if fraud_count > 0:
              subject = f"üö® FRAUD ALERT: {fraud_count} Fraudulent Transaction(s) Detected"
              priority = "HIGH"
              alert_type = "FRAUD DETECTED"
          else:
              subject = "‚úÖ Fraud Detection System: No Threats Detected"
              priority = "NORMAL"
              alert_type = "SYSTEM HEALTHY"
          
          email_body = f"""FRAUD DETECTION SYSTEM ALERT
          ============================
          
          Alert Type: {alert_type}
          Fraud Count: {fraud_count}
          Priority: {priority}
          Timestamp: {timestamp}
          
          Technical Details:
          - Repository: {repository}
          - Commit: {commit_sha[:8]}...
          - AWS Region: {os.environ.get('AWS_REGION', 'us-east-1')}
          
          {'‚ö†Ô∏è IMMEDIATE ACTION REQUIRED: Review detected fraudulent transactions.' if fraud_count > 0 else '‚úÖ No fraud detected. System operating normally.'}
          
          View details: https://github.com/{repository}/actions
          Fraud Report: https://github.com/{repository}/blob/main/outputs/fraud_report.json
          
          This is an automated message from the Fraud Detection System.
          Powered by AWS SES + GitHub Actions + Machine Learning"""
          
          try:
              response = ses_client.send_email(
                  Source=sender_email,
                  Destination={'ToAddresses': [recipient_email]},
                  Message={
                      'Subject': {'Data': subject, 'Charset': 'UTF-8'},
                      'Body': {'Text': {'Data': email_body, 'Charset': 'UTF-8'}}
                  }
              )
              print("‚úÖ Fraud alert email sent successfully!")
              print(f"üìß MessageId: {response.get('MessageId')}")
              print(f"üìä Fraud count: {fraud_count}, Recipient: {recipient_email}")
          except Exception as e:
              print(f"‚ùå Error sending fraud alert email: {e}")
          PY
